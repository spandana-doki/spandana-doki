#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX_SIZE 100
struct Stack {
    char data[MAX_SIZE];
    int top;
};
void initialize(struct Stack *stack) {
    stack->top = -1;
}
void push(struct Stack *stack, char value) {
    if (stack->top < MAX_SIZE - 1) {
        stack->data[++(stack->top)] = value;
    }
}
char pop(struct Stack *stack) {
    if (stack->top >= 0) {
        return stack->data[(stack->top)--];
    }
    return '\0';
}
int precedence(char operator) {
    if (operator == '+' || operator == '-')
        return 1;
    else if (operator == '*' || operator == '/')
        return 2;
    else if (operator == '^')
        return 3;
    return 0;
}
void infixToPostfix(char infix[], char postfix[]) {
    struct Stack stack;
    initialize(&stack);
    int postfixIndex = 0;
for (int i = 0; infix[i] != '\0'; i++) {
        if (isalnum(infix[i])) {
            postfix[postfixIndex++] = infix[i];
        } else if (infix[i] == '(') {
            push(&stack, '(');
        } else if (infix[i] == ')') {
            while (stack.top >= 0 && stack.data[stack.top] != '(') {
                postfix[postfixIndex++] = pop(&stack);
            }
            pop(&stack); 
        } else {
            while (stack.top >= 0 && precedence(infix[i]) <= precedence(stack.data[stack.top])) {
                postfix[postfixIndex++] = pop(&stack);
            }
            push(&stack, infix[i]);
        }
    }
    while (stack.top >= 0) {
        postfix[postfixIndex++] = pop(&stack);
    }
    postfix[postfixIndex] = '\0';
}
int main() {
    char infix[MAX_SIZE];
    char postfix[MAX_SIZE];
    printf("Enter infix expression: ");
    fgets(infix, sizeof(infix), stdin);
    infix[strlen(infix) - 1] = '\0'; 
infixToPostfix(infix, postfix);
    printf("Postfix expression: %s\n", postfix);
return 0;
}
